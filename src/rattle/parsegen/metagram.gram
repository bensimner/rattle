# generated by metagram.py

@tokens := {
    ASSIGN=":=",
    ALT="|",
    LBRACE="{",
    RBRACE="}",
    SEMICOLON=";",
    COMMA=",",
    EQ="=",
    LPAREN="(",
    RPAREN=")",
};

@header := "# for the metagram actions
from rattle.parsegen.grammar import *
";

@start_symbol := grammar;

alt := (((body=rule_expr "{") action=STRING) "}") { "Alt(body, action.value)" } | body=rule_expr { "Alt(body)" };
atom := t=IDENT { "NT(t.value)" } | t=STRING { "t.value" } | (("(" body=rule_expr) ")") { "body" };
enum := (("{" enums=enum_line*) "}") { "enums" };
enum_line := (((n=IDENT "=") s=STRING) ",") { "(n.value, s.string_value)" };
grammar := (hds=header_lines rules=rules) { "Grammar.from_header_and_rules(hds, rules).normalize()" };
header_line := s=header_rule { "{"header": s}" } | s=start_symbol_rule { "{"start_symbol": s}" } | toks=tokens_rule { "{"tokens": toks}" };
header_lines := header_line*;
header_rule := ((("@header" ":=") s=STRING) ";") { "s.value" };
rule := (((name=IDENT ":=") body=rule_body) ";") { "Rule(name.value, rhs=body)" };
rule_assign_part := ((name=IDENT "=") body=rule_expr) { "Boxed(name.value, body)" };
rule_body := (first=alt rest=("|" alt)*) { "Rhs([first, *rest])" };
rule_expr := (lhs=rule_expr_part rhs=rule_expr) { "Sequence(None, lhs, rhs)" } | rule_expr_part;
rule_expr_part := rule_assign_part | atom;
rules := rule*;
start_symbol_rule := ((("@start_symbol" ":=") s=IDENT) ";") { "s.value" };
tokens_rule := ((("@tokens" ":=") enum=enum) ";") { "make_token_enum(enum)" };
